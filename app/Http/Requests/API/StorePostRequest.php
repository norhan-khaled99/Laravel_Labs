<?php

namespace App\Http\Requests\API;
use App\Http\Controllers\API;
use Illuminate\Contracts\Validation\Validator;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Http\Exceptions\HttpResponseException;

class StorePostRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     */
    public function authorize(): bool
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, \Illuminate\Contracts\Validation\ValidationRule|array|string>
     */
    public function rules(): array
    {
        return [
            "title"=>'required',

        ];
    }
//    public  function failedValidation(Validator $validator)
//    {
////        parent::failedValidation($validator); // TODO: Change the autogenerated stub
//        throw new \HttpResponseException(response()->json([
//            'success'=>false,
//            "message"=>"validatoin error",
//            "data"=>$validator->errors()
//        ],status: 400
//        ));
//
//    }
    protected function failedValidation(Validator $validator)
    {
        $errors = $validator->errors();
        $message = 'validation error ';
        throw new HttpResponseException(response()->json(['message' => $message, 'errors' => $errors], 400));
    }
    function messages()
    {
        return["title"=>"shouldn't be empty"];
    }


}
